{"version":3,"sources":["constants.ts","components/modeSwitcher.tsx","components/header.tsx","utils/reverser.ts","utils/transliterator.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RUS","split","RUS_B","ENG","ENG_B","LANGUAGES","MODES","TRANSLITERATOR","REVERSER","REVERSER_MODES","ModeSwitcher","mode","handleModeChange","FormControl","component","RadioGroup","name","value","Object","values","map","item","FormControlLabel","control","Radio","label","onClick","Header","language","reverserMode","handleReverserModeChange","handleLangChange","className","reverser","text","submode","output","words","trim","reversedWords","word","push","reverse","join","transliterate","lang","fromLang","toLang","x","length","replace","toUpperCase","App","useState","setLanguage","setMode","setReverserMode","inputData","setInputData","outputData","setOutputData","handleActionClick","processedData","navigator","clipboard","writeText","console","log","id","placeholder","rows","onChange","e","target","onKeyPress","key","type","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd1c884a.chunk.js","sourcesContent":["export const RUS = \"а б в г д е ё ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я і\".split(/ +/g);\r\n\r\nexport const RUS_B = \"升 五 乃 广 亼 仨 仨 米 乡 计 认 长 入 从 廾 口 刀 尸 匚 丅 丫 中 乂 凵 丩 山 山 ら もI も 彐 扣 兄 工\".split(/ +/g);\r\n\r\nexport const ENG = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".split(/ +/g);\r\n\r\nexport const ENG_B = \"升 乃 匚 力 仨 下 马 卄 工 亅 长 乚 从 认 口 尸 贝 尺 丂 丅 凵 V 山 乂 丫 乙\".split(/ +/g);\r\n\r\nexport const ENQ_QWERTY = \"q w e r t y u i o p [ ] a s d f g h j k l ; ' z x c v b n m , . /\".split(/ +/g);\r\n\r\nexport const RUS_QWERTY = \"й ц у к е н г ш щ з х ъ ф ы в а п р о л д ж э я ч с м и т ь б ю .\".split(/ +/g);\r\n\r\nexport const LANGUAGES = { \r\n    ENG: \"ENG\", \r\n    RUS: \"RUS\" \r\n};\r\n\r\nexport const MODES = {\r\n    TRANSLITERATOR: \"TRANSLITERATOR\",\r\n    REVERSER: \"REVERSER\"\r\n};\r\n\r\nexport const REVERSER_MODES = {\r\n    FULL_TEXT: \"FULL_TEXT\",\r\n    WORD: \"WORD\"\r\n}\r\n\r\n","import React from \"react\";\r\nimport {\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n} from \"@mui/material\";\r\n\r\nimport { MODES } from \"../constants\";\r\n\r\nconst ModeSwitcher = ({ mode, handleModeChange }) => {\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <RadioGroup aria-label=\"mode\" name=\"row-radio-buttons-group\" value={mode}>\r\n        {Object.values(MODES).map((item) => (\r\n          <FormControlLabel\r\n            value={item}\r\n            key={item}\r\n            control={<Radio />}\r\n            label={item}\r\n            onClick={() => handleModeChange(item)}\r\n          />\r\n        ))}\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default ModeSwitcher;\r\n","import React from \"react\";\r\nimport { LANGUAGES, MODES, REVERSER_MODES } from \"../constants\";\r\n\r\nconst Header = ({\r\n  language,\r\n  mode,\r\n  reverserMode,\r\n  handleReverserModeChange,\r\n  handleLangChange,\r\n}) => {\r\n  if (mode === MODES.REVERSER) {\r\n    return (\r\n      <h1>\r\n        {reverserMode === REVERSER_MODES.WORD ? (\r\n          <span\r\n            className=\"language\"\r\n            onClick={() => handleReverserModeChange(REVERSER_MODES.FULL_TEXT)}\r\n          >\r\n            Words\r\n          </span>\r\n        ) : (\r\n          <span\r\n            className=\"language\"\r\n            onClick={() => handleReverserModeChange(REVERSER_MODES.WORD)}\r\n          >\r\n            Full text\r\n          </span>\r\n        )}\r\n      </h1>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <h1>\r\n      {language === LANGUAGES.RUS ? (\r\n        <span\r\n          className=\"language\"\r\n          onClick={() => handleLangChange(LANGUAGES.ENG)}\r\n        >\r\n          Ru\r\n        </span>\r\n      ) : (\r\n        <span\r\n          className=\"language\"\r\n          onClick={() => handleLangChange(LANGUAGES.RUS)}\r\n        >\r\n          Eng\r\n        </span>\r\n      )}{\" \"}\r\n      to B\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { REVERSER_MODES } from \"../constants\";\r\n\r\nconst reverser = (text: string, submode: string) => {\r\n  let output: string;\r\n\r\n  if (submode === REVERSER_MODES.WORD) {\r\n    const words: string[] = text.trim().split(\" \");\r\n    const reversedWords: string[] = [];\r\n    for (const word of words) {\r\n      reversedWords.push(word.trim().split(\"\").reverse().join(\"\"));\r\n    }\r\n    output = reversedWords.join(\" \");\r\n  } else {\r\n    output = text.trim().split(\"\").reverse().join(\"\");\r\n  }\r\n\r\n  return output;\r\n};\r\n\r\nexport default reverser;\r\n","import { ENG, ENG_B, RUS, RUS_B, LANGUAGES } from \"../constants\";\r\n\r\nconst transliterate = (text: string, lang: string) => {\r\n  let fromLang: string[];\r\n  let toLang: string[];\r\n\r\n  if (lang === LANGUAGES.ENG) {\r\n    fromLang = ENG;\r\n    toLang = ENG_B;\r\n  } else {\r\n    fromLang = RUS;\r\n    toLang = RUS_B;\r\n  }\r\n\r\n  for (let x = 0; x < fromLang.length; x++) {\r\n    text = text.replace(/\\s+/g, \"  \");\r\n    text = text.split(fromLang[x]).join(toLang[x]);\r\n    text = text.split(fromLang[x].toUpperCase()).join(toLang[x].toUpperCase());\r\n  }\r\n  return text;\r\n};\r\n\r\nexport default transliterate;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport ModeSwitcher from \"./components/modeSwitcher\";\nimport Header from \"./components/header\";\n\nimport reverser from \"./utils/reverser\";\nimport transliterate from \"./utils/transliterator\";\nimport { LANGUAGES, MODES, REVERSER_MODES } from \"./constants\";\n\nconst App = () => {\n  const [language, setLanguage] = useState(LANGUAGES.RUS);\n  const [mode, setMode] = useState(MODES.TRANSLITERATOR);\n  const [reverserMode, setReverserMode] = useState(REVERSER_MODES.WORD);\n  const [inputData, setInputData] = useState(\"\");\n  const [outputData, setOutputData] = useState(\"\");\n\n  const handleActionClick = () => {\n    let processedData: string;\n\n    if (mode === MODES.TRANSLITERATOR) {\n      processedData = transliterate(inputData, language);\n    }\n    if (mode === MODES.REVERSER) {\n      processedData = reverser(inputData, reverserMode);\n    }\n\n    navigator.clipboard.writeText(processedData);\n    setOutputData(processedData);\n  };\n\n  const handleInputChange = (e: any) => {\n    const value: string = e.target.value;\n    setInputData(value);\n  };\n\n  const handleLangChange = (lang: string) => {\n    const value: string = lang;\n    setLanguage(value);\n  };\n\n  const handleModeChange = (mode: string) => {\n    setMode(mode);\n    console.log(mode);\n  };\n\n  const handleReverserModeChange = (mode: string) => {\n    setReverserMode(mode);\n  };\n\n  const handleKeyPress = (e: any) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      handleActionClick();\n    }\n  };\n\n  return (\n    <main className=\"container\">\n      <div className=\"card p-5 mt-3\">\n        <header className=\"header\">\n          <Header\n            language={language}\n            mode={mode}\n            reverserMode={reverserMode}\n            handleReverserModeChange={handleReverserModeChange}\n            handleLangChange={handleLangChange}\n          />\n          <ModeSwitcher mode={mode} handleModeChange={handleModeChange} />\n        </header>\n\n        <textarea\n          id=\"input-b\"\n          placeholder=\"Enter smth\"\n          rows={4}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n        ></textarea>\n        <br />\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          id=\"transliterator-btn\"\n          onClick={handleActionClick}\n        >\n          Transliterate\n        </button>\n        <br />\n        <textarea\n          id=\"output-b\"\n          placeholder=\"Output\"\n          rows={4}\n          value={outputData}\n          disabled\n        ></textarea>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}