{"version":3,"sources":["constants.ts","utils/transliterator.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RUS","split","RUS_B","ENG","ENG_B","LANGUAGES","MODES","transliterate","text","lang","fromLang","toLang","x","length","replace","join","toUpperCase","Header","language","handleLangChange","mode","className","onClick","App","useState","setLanguage","inputData","setInputData","outputData","setOutputData","handletransliterateClick","processedData","navigator","clipboard","writeText","id","placeholder","rows","onChange","e","value","target","onKeyPress","key","type","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAaA,G,MAAM,gPAAsEC,MAAM,QAElFC,EAAQ,iPAAuED,MAAM,OAErFE,EAAM,sDAAsDF,MAAM,OAElEG,EAAQ,mLAAsDH,MAAM,OAEpEI,EACJ,MADIA,EAEJ,MAGIC,EACO,iBCQLC,EApBO,SAACC,EAAcC,GACnC,IAAIC,EACAC,EAEAF,IAASJ,GACXK,EAAWP,EACXQ,EAASP,IAETM,EAAWV,EACXW,EAAST,GAGX,IAAK,IAAIU,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAGnCJ,GADAA,GADAA,EAAOA,EAAKM,QAAQ,OAAQ,OAChBb,MAAMS,EAASE,IAAIG,KAAKJ,EAAOC,KAC/BX,MAAMS,EAASE,GAAGI,eAAeD,KAAKJ,EAAOC,GAAGI,eAE9D,OAAOR,G,OCbHS,EAAS,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAgBC,GAAuB,EAA7BC,KAA6B,EAAvBD,kBAChC,OACE,+BACGD,IAAab,EACZ,sBACEgB,UAAU,WACVC,QAAS,kBAAMH,EAAiBd,IAFlC,gBAOA,sBACEgB,UAAU,WACVC,QAAS,kBAAMH,EAAiBd,IAFlC,iBAMC,IAfL,WAyFWkB,EApEH,WACV,MAAgCC,mBAASnB,GAAzC,mBAAOa,EAAP,KAAiBO,EAAjB,KACA,EAAwBD,mBAASlB,GAAjC,mBAAOc,EAAP,KACA,GADA,KACkCI,mBAAS,KAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,mBAAS,IAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAA2B,WAC/B,IAAMC,EAAgBxB,EAAcmB,EAAWR,GAC/Cc,UAAUC,UAAUC,UAAUH,GAC9BF,EAAcE,IAmBhB,OACE,sBAAMV,UAAU,YAAhB,SACE,sBAAKA,UAAU,gBAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,cAAC,EAAD,CACEH,SAAUA,EACVE,KAAMA,EACND,iBAlBe,SAACV,GAExBgB,EADsBhB,QAqBlB,0BACE0B,GAAG,UACHC,YAAY,aACZC,KAAM,EACNC,SA/BkB,SAACC,GACzB,IAAMC,EAAgBD,EAAEE,OAAOD,MAC/Bb,EAAaa,IA8BPE,WAtBe,SAACH,GACR,UAAVA,EAAEI,KACJb,OAsBE,uBACA,wBACEc,KAAK,SACLvB,UAAU,oBACVc,GAAG,qBACHb,QAASQ,EAJX,2BAQA,uBACA,0BACEK,GAAG,WACHC,YAAY,SACZC,KAAM,EACNG,MAAOZ,EACPiB,UAAQ,UC5EHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.963ad45c.chunk.js","sourcesContent":["export const RUS = \"а б в г д е ё ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я і\".split(/ +/g);\r\n\r\nexport const RUS_B = \"升 五 乃 广 亼 仨 仨 米 乡 计 认 长 入 从 廾 口 刀 尸 匚 丅 丫 中 乂 凵 丩 山 山 ら もI も 彐 扣 兄 工\".split(/ +/g);\r\n\r\nexport const ENG = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".split(/ +/g);\r\n\r\nexport const ENG_B = \"升 乃 匚 力 仨 下 马 卄 工 亅 长 乚 从 认 口 尸 贝 尺 丂 丅 凵 V 山 乂 丫 乙\".split(/ +/g);\r\n\r\nexport const LANGUAGES = { \r\n    ENG: \"ENG\", \r\n    RUS: \"RUS\" \r\n};\r\n\r\nexport const MODES = {\r\n    TRANSLITERATOR: \"TRANSLITERATOR\",\r\n    REVERSE: \"REVERSE\"\r\n};\r\n\r\n","import { ENG, ENG_B, RUS, RUS_B, LANGUAGES } from \"../constants\";\r\n\r\nconst transliterate = (text: string, lang: string) => {\r\n  let fromLang: string[];\r\n  let toLang: string[];\r\n\r\n  if (lang === LANGUAGES.ENG) {\r\n    fromLang = ENG;\r\n    toLang = ENG_B;\r\n  } else {\r\n    fromLang = RUS;\r\n    toLang = RUS_B;\r\n  }\r\n\r\n  for (let x = 0; x < fromLang.length; x++) {\r\n    text = text.replace(/\\s+/g, \"  \");\r\n    text = text.split(fromLang[x]).join(toLang[x]);\r\n    text = text.split(fromLang[x].toUpperCase()).join(toLang[x].toUpperCase());\r\n  }\r\n  return text;\r\n};\r\n\r\nexport default transliterate;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport transliterate from \"./utils/transliterator\";\nimport { LANGUAGES, MODES } from \"./constants\";\n\nconst Header = ({ language, mode, handleLangChange }) => {\n  return (\n    <h1>\n      {language === LANGUAGES.RUS ? (\n        <span\n          className=\"language\"\n          onClick={() => handleLangChange(LANGUAGES.ENG)}\n        >\n          Ru\n        </span>\n      ) : (\n        <span\n          className=\"language\"\n          onClick={() => handleLangChange(LANGUAGES.RUS)}\n        >\n          Eng\n        </span>\n      )}{\" \"}\n      to B\n    </h1>\n  );\n};\n\nconst App = () => {\n  const [language, setLanguage] = useState(LANGUAGES.RUS);\n  const [mode, setMode] = useState(MODES.TRANSLITERATOR);\n  const [inputData, setInputData] = useState(\"\");\n  const [outputData, setOutputData] = useState(\"\");\n\n  const handletransliterateClick = () => {\n    const processedData = transliterate(inputData, language);\n    navigator.clipboard.writeText(processedData);\n    setOutputData(processedData);\n  };\n\n  const handleInputChange = (e: any) => {\n    const value: string = e.target.value;\n    setInputData(value);\n  };\n\n  const handleLangChange = (lang: string) => {\n    const value: string = lang;\n    setLanguage(value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      handletransliterateClick();\n    }\n  }\n\n  return (\n    <main className=\"container\">\n      <div className=\"card p-5 mt-3\">\n        <header className=\"header\">\n          <Header\n            language={language}\n            mode={mode}\n            handleLangChange={handleLangChange}\n          />\n        </header>\n\n        <textarea\n          id=\"input-b\"\n          placeholder=\"Enter smth\"\n          rows={4}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n        ></textarea>\n        <br />\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          id=\"transliterator-btn\"\n          onClick={handletransliterateClick}\n        >\n          Transliterate\n        </button>\n        <br />\n        <textarea\n          id=\"output-b\"\n          placeholder=\"Output\"\n          rows={4}\n          value={outputData}\n          disabled\n        ></textarea>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}